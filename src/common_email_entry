# Common E-mail Entry


The following example represents an E-mail entry. 

Currently, it is mandatory to be explicit about all possible fields. However it is not required to fill every possible field.

Following the example below, we will explain the role of each field.

The basic structure looks likes this:

```json
{
    "id": "<ENTRY ID>",
    "utc": "<SEND TIMESTAMP IN UTC ISO 8601 RFC3339 FORMAT>",
    "notify_error": [ "<OPTIONAL E-MAIL ADDRESS FOR ERROR NOTIFICATIONS>" ],
    "email": {
        "<KEY-VALUE>": "<KEY-VALUE INPUTS, DESCRIBING HOW TO SEND THE E-MAIL>"
    },
    "context": {
        "<KEY-VALUE>": "<KEY-VALUE INPUTS, DESCRIBING THE DATA FOR THE HTML TEMPLATE>"
    }
}
```

The structure above is common among all E-mail entries. What varies are the assigned values.

| Field          | Type                 | Description                                                                                                                                   |
| -------------- | -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| `id`           | `String`             | A unique ID provided by the entry generator. There is no mandatory standard. The only requirement is that each entry must have a unique value |
| `utc`          | `String`             | A UTC timestamp value of the ISO 8601 RFC3339 standard                                                                                        |
| `notify_error` | `List` of `String`s  | A list of E-mail addresses to be notified about errors (not implemented yet)                                                                  |
| `email`        | `Map` \ `Dictionary` | A dictionary or map of values that describes the E-mail to be sent. e.g. subject, recipients, attachments, HTML template, etc.                |
| `context`      | `Map` \ `Dictionary` | Context data to be processed with the HTML template                                                                                           |

> ðŸš¨ At the moment, there are still standards to be formulated. It is within my hopes that once the project attracts attention, a community consensus will be established. So far, I try to avoid creating limits and only formulate what seems to me absolutely necessary. Striving for a standard is somewhat necessary so different clients and different potential backends, could still interface with each other with minimal to no modifications or adaptions